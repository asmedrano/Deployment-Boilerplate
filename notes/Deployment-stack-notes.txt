Angels Server Recipe

Machine Set up : Ubuntu

Install ssh ::
	sudo apt-get install openssh-server
Install vim :: 
	sudo apt-get install vim

The IP to this new machine is:: ifconfig - 192.168.43.142



1. Getting Started ( assuming root!)
-----------------------------
Basic Configs and Installs
	$ mkdir -p /home/web
	$ mkdir -p /home/web/apps
	$ mkdir -p /home/web/static
	$ mkdir -p /home/git-staging
	$ aptitude install git-core python-dev python-setuptools  postgresql-dev postgresql-client build-essential libpq-dev subversion mercurial
	$ easy_install virtualenv
	$ easy_install -U pip

2. Stop and Test Django in virtualenv
-----------------------------------------
	$ sudo virtualenv django_test
	$ sudo pip install -E django_test yolk
	$ sudo pip install -E django_test Django
	$ cd django_test
	$ source bin/activate
	// Start a Django project to test
	$ sudo bin/django-admin.py startproject mysite
	// Start up Django on this Ip
	$ cd mysite/
	$ python manage.py runserver 0.0.0.0:8000 

3. Database server: Postgres ( or same on Dev server)
--------------------------------------------------------
Install and configure Postgres::

    $ aptitude install git-core postgresql
    $ cd /etc/postgresql/8.4/main/
    $ invoke-rc.d postgresql-8.4 stop
    // make copies of original config files.
    $ cp postgresql.conf postgresql.conf.orig
    $ cp pg_hba.conf pg_hba.conf.orig
    // i used a boiler plate from my git repo and cloned it to a temp folder
    $ git clone https://happyBtn@github.com/happyBtn/Deployment-Boilerplate.git
    $ cp /web/git-staging/Deployment-Boilerplate/postgresql/postgresql.conf postgresql.conf
    $ cp /web/git-staging/Deployment-Boilerplate/postgresql/pg_hba.conf .
    // update ips! and save files	
    $ invoke-rc.d postgresql-8.4 start

And create users and database. Root user for convenience::

    $ sudo -u postgres createuser root
    // create sample user and db to test
    $ createuser sampleuser
    $ createdb -O sampleuser sampleuser

Wire up the app to PostgreSQL, load data, take a look::
    $source django_sample_app/bin/activate
    $ pip install -E django_sample_app psycopg2
    $ cd /home/web/django_sample_app/mysite
    $ vim settings.py # DATABASE_HOST = '...'
    $ ./manage.py syncdb
    $ ./manage.py runserver 0.0.0.0:8000


4. Application servers: mod_wsgi, gunicorn
-----------------------------------------------
Install Apache and mod_wsgi::
    $ aptitude install apache2 libapache2-mod-wsgi
    $ mkdir /home/web/static # DocumentRoot
    $ cd /etc/apache2/
    // Get rid of all the default Ubuntu Cruft
    $ rm -rf apache2.conf conf.d/ httpd.conf magic mods-* sites-* ports.conf
Add our config. Remember to make a python eggs dir (it should be writable by
apache, but 777 is easier)::
    $ cp /web/git-staging/Deployment-Boilerplate/apache/apache2.conf .
    $ mkdir -m777 -p /var/www/.python-eggs
    // edit this config to serve up our single Django Test app.wsgi (path/to/app/apache/django.wsgi
    $ vim apache2.conf
    //At this point we should have a .wsgi file in our app directory.
   // we should now be able to see our sample django app. 

Now try it with Gunicorn::
   $ cd /home/web/
   $ pip install -E django_sample_app gunicorn
   $ cd django_sample_app/
   $ source bin/activate
   (django_sample_app)root@ubuntu: bin/gunicorn_django -b 0.0.0.0 mysite/settings.py

5. Load balancers
----------------------

Set up NGINX 
   $ aptitude install nginx 
   $ cd /etc/nginx/
   // zap nginx stuff
   $ rm -rf conf.d/ fastcgi_params koi-* nginx.conf sites-* win-utf

Edit Apache conf to listen on port 8000::

    $ vim /etc/apache2/apache2.conf
    $ invoke-rc.d apache2 restart

Verify that Nginx is correctly proxying
   $ curl -I 192.x.x.x 



Additional::
----------------
Installing PHP for NGINX only
 http://gerardmcgarry.com/blog/how-install-php-fpm-nginx-ubuntu-1004-server

Add the right repositories!
 $ aptitude install python-software-properties
 $ add-apt-repository ppa:brianmercer/php

Next, run this command to update your repositories list:

 $ aptitude -y update
 //Install the required software
Now that we've got our additional repository ready, time to install the necessary components. Run the following commands - the first two download and install the software, the last one starts the php5-fpm service:

 $ aptitude -y install php5-cli php5-common php5-mysql php5-suhosin php5-gd
 $ aptitude -y install php5-fpm php5-cgi php-pear php5-memcache php-apc
 // update the config 
 $ cd /etc/php5/fpm
---------------------------
	Edit the following settings. I found that in my default configuration, the pm value was set to static, therefore all the other settings were commented out. So, don't forget to uncomment the settings before changing them!
	pm = dynamic
	pm.max_children = 8
	pm.start_servers = 2
	pm.min_spare_servers = 2
	pm.max_spare_servers = 3
	pm.max_requests = 500
--------------------
 $ vim php5-fpm.conf 
 $ service php5-fpm start


Installing Supervisor
-------------------------------------
 $ pip install -E django_sample_app supervisor
 // you can test whether or not supervisors rebooting gunicorn by killing the gunicorn process
 $ ps ax|grep gunicorn # get the pid
 $ kill pid


Installing sqlite3
--------------------------
 $ apt-get install sqlite3
 // you can test your installation
 $ sqlite3 test.db
 SQLite version 3.0.8
     Enter ".help" for instructions
     sqlite> .quit
 $ sqlite3 test.db  "create table t1 (t1key INTEGER PRIMARY KEY,data TEXT,num double,timeEnter DATE);"
 $ sqlite3 test.db  "insert into t1 (data,num) values ('This is sample data',3);"
 $ sqlite3 test.db  "select * from t1 limit 2";




MISC
------------
# added the following to ENV/bin/activate

export PYTHONPATH="/home/web/apps/mlt/ENV/mlt"
export CELERY_LOADER="djcelery.loaders.DjangoLoader"



example supervisord conf

[program:mlt_gunicorn]
command=/home/web/apps/mlt/ENV/bin/run /home/web/apps/mlt/ENV/ /home/web/apps/mlt/ENV/bin/gunicorn_django -b 127.0.0.1:8100 --workers=2 /home/web/apps/mlt/ENV/mlt/mlt/settings/prod.py
user=mlt
autostart=true
autorestart=true
stdout_logfile=/home/web/apps/mlt/logs/supervisord.log
stderr_logfile=/home/web/apps/mlt/logs/supervisord.log
redirect_stderr=true

[program:mlt_celery]
command=/home/web/apps/mlt/ENV/bin/python /home/web/apps/mlt/ENV/mlt/manage.py celeryd --loglevel=INFO
user=mlt
numprocs=1
stdout_logfile=/home/web/apps/mlt/logs/celeryd.log
stderr_logfile=/home/web/apps/mlt/logs/celeryd.log
autostart=true
autorestart=true
startsecs=10
evironment=PYTHONPATH="/home/web/apps/mlt/ENV/mlt", CELERY_LOADER="djcelery.loaders.DjangoLoader"


; Need to wait for currently executing tasks to finish at shutdown.
; Increase this if you have very long running tasks.
stopwaitsecs = 600



example of a virtual evn run fiel

#!/bin/bash
VENV=$1
if [ -z $VENV ]; then
    echo "usage: runinenv [virtualenv_path] CMDS"
    exit 1
fi
. ${VENV}/bin/activate
shift 1
echo "Executing $@ in ${VENV}"
exec "$@"
deactivate


usage: /path/to/runfile/run /path/to/ENV/ /path/to/ENV/bin/gunicorn_django -b 127.0.0.1:8100 --workers=2




	



 
